<?php

namespace app\modules\app433\models;

use app\services\FunctionStatic;
use Yii;

/**
 * This is the model class for table "Post".
 *
 * @property integer $ID
 * @property integer $CategoryID
 * @property integer $Type
 * @property string $Title
 * @property integer $MatchID
 * @property string $Thumbnails
 * @property string $Thumb
 * @property string $UrlVideo
 * @property string $UrlVideo144p
 * @property string $UrlVideo240p
 * @property string $UrlVideoToken
 * @property string $ThumbVideo
 * @property string $Content
 * @property string $ContentNone
 * @property string $ContentExtend
 * @property string $ContentExtendNone
 * @property string $Keyword
 * @property integer $Recommened
 * @property integer $View
 * @property string $DatePublic
 * @property integer $UserCreate
 * @property integer $UserUpdate
 * @property integer $AllowEdit
 * @property string $DateCreate
 * @property string $DateUpdate
 * @property integer $Live
 * @property integer $Pin
 * @property integer $PinVideo
 * @property integer $PinRecommened
 * @property integer $Public
 * @property integer $IsDelete
 * @property integer $IsHotNews
 * @property string $Summary
 * @property string $UrlVideo360p
 * @property string $UrlVideo480p
 * @property integer $OnlyDesktop
 * @property string $ThumbnailsCover
 * @property string $Author
 * @property string $StreamKey
 * @property string $StreamKeyEndcode
 */
class Post extends \yii\db\ActiveRecord {

    /**
     * @inheritdoc
     */
    public static function tableName() {
        return 'Post';
    }

    /**
     * @inheritdoc
     */
    public function rules() {
        return [
            [['CategoryID', 'Type', 'MatchID', 'Recommened', 'View', 'UserCreate',
            'UserUpdate', 'AllowEdit', 'Live', 'Pin',
            'PinVideo', 'PinRecommened', 'Public', 'IsDelete',
            'IsHotNews', 'VideoHome', 'OnlyDesktop',  'ID'], 'integer'],
            [['Thumbnails', 'Content', 'ContentNone', 'ContentExtend',
            'ContentExtendNone', 'ThumbVideo', 'Summary', 'UrlVideo360p',
            'UrlVideo480p', 'ThumbnailsCover', 'Author', 'StreamKey', 'StreamKeyEndcode'], 'string'],
            [['CategoryID', 'ContentNone', 'ContentExtendNone'], 'required'],
            [['DatePublic', 'DateCreate', 'DateUpdate'], 'safe'],
            [['UrlVideoToken'], 'string', 'max' => 100],
            [['Title'], 'string', 'max' => 100],
            [['Summary'], 'string', 'max' => 200],
            [['Thumb', 'UrlVideo', 'UrlVideo144p', 'UrlVideo240p'], 'string', 'max' => 255],
            [['Keyword'], 'string', 'max' => 200],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return [
            'ID' => 'ID',
            'CategoryID' => 'Chuyên mục',
            'Type' => 'Type',
            'Title' => 'Tiêu đề',
            'MatchID' => 'Match ID',
            'Thumbnails' => 'Thumbnails',
            'Thumb' => 'Thumb',
            'UrlVideo' => 'Url Video',
            'UrlVideo144p' => 'Url Video144p',
            'UrlVideo240p' => 'Url Video240p',
            'UrlVideoToken' => 'Url Video Token',
            'ThumbVideo' => 'Thumb Video',
            'Content' => 'Nội dung chính',
            'ContentNone' => 'Content None',
            'ContentExtend' => 'Nội dung mở rộng',
            'ContentExtendNone' => 'Content Extend None',
            'Keyword' => 'Keyword',
            'Recommened' => 'Đừng bỏ lỡ',
            'View' => 'View',
            'DatePublic' => 'Thời gian xuất bản',
            'UserCreate' => 'Người tạo',
            'UserUpdate' => 'Người sửa',
            'AllowEdit' => 'Số lần cho phép sửa bài',
            'DateCreate' => 'Ngày tạo bài',
            'DateUpdate' => 'Ngày sửa bài',
            'Live' => 'Live',
            'Pin' => 'Pin',
            'PinVideo' => 'Pin Video',
            'PinRecommened' => 'Pin Recommened',
            'Public' => 'Public',
            'IsDelete' => 'Is Delete',
            'CategoryName' => 'Category Name',
            'Summary' => 'Mô tả',
            'StreamKey' => 'Stream key',
        ];
    }

    public function afterSave($insert, $changedAttributes) {
        if (!$this->isNewRecord) {
            $this->fbUpdateOG();
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    private function fbUpdateOG() {
        $Category = Categories::findOne(['CategoryID' => $this->CategoryID]);
        if ($this->Type == 4) {
            $url = "http://bongda433.com/" . $Category->TitleAlias . "/" . FunctionStatic::getAlias($this->Title, true) . '-' . $this->ID . '.html';
        } else
            $url = "http://bongda433.com/" . $Category->TitleAlias . "/" . $this->ID . '.html';
        $data = [
            "id" => $url,
            "scrape" => "true"
        ];
        $data2post = http_build_query($data);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "https://graph.facebook.com");
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data2post);
        curl_exec($ch);
    }

}
